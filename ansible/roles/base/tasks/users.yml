---
- block:
    - name: Load user metadata
      include_vars:
        name: _user_vars
        file: "{{ item }}"
      loop: "{{ q('fileglob', 'vars/users/*') }}"
      register: user_vars_include
    - name: Format and filter user metadata
      set_fact:
        users: "{{ user_vars_include.results | filter_users_by_host(inventory_hostname, group_names) }}"
- name: Manage users
  block:
    - name: Read available shells from /etc/shells
      slurp:
        src: /etc/shells
      register: etc_shells_content
    
    - name: Parse available shells
      set_fact:
        available_shells: "{{ (etc_shells_content['content'] | b64decode).split('\n') | map('trim') | select('match', '^/') | list }}"
    
    - name: Debug raw /etc/shells content
      debug:
        msg: "Raw /etc/shells: {{ etc_shells_content['content'] | b64decode }}"
        verbosity: 1
    
    - name: Debug available shells
      debug:
        msg: "Available shells in /etc/shells: {{ available_shells }}"
    
    - name: Debug user shells before resolution
      debug:
        msg: "User: {{ item.username }}, Requested shell: {{ item.shell | default('not specified') }}"
      loop: "{{ users }}"
      loop_control:
        label: "{{ item.username }}"
    
    - name: Test shell basename extraction
      debug:
        msg: "Shell path: {{ item }}, Basename: {{ item.split('/') | last }}"
      loop: "{{ available_shells }}"
      loop_control:
        label: "{{ item }}"
      when: false
    
    - name: Build shell name to path mapping
      set_fact:
        shell_map: "{{ shell_map | default({}) | combine({item.split('/') | last: item}) }}"
      loop: "{{ available_shells }}"
      loop_control:
        label: "{{ item.split('/') | last }}"
    
    - name: Debug shell mapping
      debug:
        msg: "Shell mapping: {{ shell_map }}"
    
    - name: Resolve shell paths for users
      set_fact:
        users_with_resolved_shells: "{{ users_with_resolved_shells | default([]) + [item | combine({'resolved_shell': resolved_shell, 'shell_match_found': match_found, 'shell_requested': shell_name})] }}"
      vars:
        shell_name: "{{ item.shell | default('sh') }}"
        match_found: "{{ (shell_name.startswith('/') and shell_name in available_shells) or (not shell_name.startswith('/') and shell_name in shell_map) }}"
        resolved_shell: "{{ shell_name if (shell_name.startswith('/') and shell_name in available_shells) else (shell_map[shell_name] if (not shell_name.startswith('/') and shell_name in shell_map) else '/bin/sh') }}"
      loop: "{{ users }}"
      loop_control:
        label: "{{ item.username }}"
    
    - name: Debug resolved shells
      debug:
        msg: "User: {{ item.username }}, Requested: '{{ item.shell_requested }}', Match found: {{ item.shell_match_found }}, Resolved: '{{ item.resolved_shell }}', Available: {{ available_shells }}"
      loop: "{{ users_with_resolved_shells }}"
      loop_control:
        label: "{{ item.username }}"
    
    - name: Create user primary group
      group:
        name: '{{ item.username }}'
        state: present
        gid: '{{ item.uid }}'
      loop: '{{ users_with_resolved_shells }}'
      loop_control:
        label: '{{ item.username }}'
    
    - name: Create user
      user:
        name: '{{ item.username }}'
        comment: '{{ item.fullname }}'
        shell: '{{ item.resolved_shell }}'
        group: '{{ item.username }}'
        groups: '{{ item.groups | default([]) }}'
        append: false
        home: '{{ item.home | default("/home/" + item.username) }}'
        create_home: yes
        uid: '{{ item.uid }}'
        password: '*************'
      loop: '{{ users_with_resolved_shells }}'
      loop_control:
        label: '{{ item.username }}'
    - name: Set home directory permissions
      file:
        path: '{{ item.home | default("/home/" + item.username) }}'
        state: directory
        mode: '0700'
        owner: '{{ item.username }}'
        group: '{{ item.username }}'
      loop: '{{ users_with_resolved_shells }}'
      loop_control:
        label: '{{ item.username }}'
    - name: Find public keys for each user
      find:
        paths: "public_keys/{{ item.username }}"
        file_type: file
      register: user_key_files
      loop: "{{ users }}"
      loop_control:
        label: "{{ item.username }}"
      delegate_to: localhost
      become: false
    
    - name: Add users' authorized keys
      authorized_key:
        user: '{{ item.0.item.username }}'
        state: present
        manage_dir: true
        key: "{{ lookup('file', item.1.path) }}"
      loop: "{{ user_key_files.results | subelements('files', {'skip_missing': True}) }}"
      loop_control:
        label: '{{ item.0.item.username }}'
  when: manage_users
