---
- name: Install dependencies
  package:
    name:
      - python3
      - py311-pipx
      - libxslt
      - libxml2 
      - postgresql16-client
      - rust
      - git-lite
      - pyenv
    state: present
- name: Check if poetry is installed
  stat:
    path: /opt/pipx/venvs/poetry
  register: poetry
- name: Install poetry
  shell:
    cmd: pipx install --global poetry
  when: 'not poetry.stat.exists'
- name: Check if Python is installed by pyenv
  stat:
    path: /opt/pyenv/versions/{{ python_version }}
  register: pyenv_python
- name: Install Python by pyenv
  shell:
    cmd: '`pyenv which python-build` {{ python_version }} /opt/pyenv/versions/{{ python_version }}'
  when: 'not pyenv_python.stat.exists'
- name: Check if Python is sane
  shell:
    cmd: /opt/pyenv/versions/{{ python_version }}/bin/python3 -c 'import sysconfig; print(sysconfig.get_path("platlib"))'
- name: Create .ssh directory for certificate-reader key
  file:
    name: /root/.ssh
    state: directory
    owner: root
    group: '{{ wheel }}'
    mode: '700'
- name: Create certificate-reader SSH key in root's $HOME
  copy: content="{{ ssm_parameters['expense-analysis-deployer-ssh-private-key'] }}" dest=/root/.ssh/expense-analysis-deployer mode=600
- name: Create application directory
  file:
    path: '{{ expense_analysis_dir }}'
    state: directory
    owner: 'root'
    group: '{{ wheel }}'
    mode: '0755'
- name: Mark application directory as safe
  copy:
    content: |-
      [safe]
        directory = {{ expense_analysis_dir }}
    dest: /root/.gitconfig
    owner: 'root'
    group: '{{ wheel }}'
    mode: '0644'
- name: Clone Expense Analysis App with API key
  git:
    repo: 'git@github.com:jwfh/expense-analysis.git'
    dest: '{{ expense_analysis_dir }}'
    version: '{{ expense_analysis_git_ref }}'
    accept_hostkey: true
    key_file: /root/.ssh/expense-analysis-deployer
    ssh_opts: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    clone: true
    update: true
    force: true
- name: Run Poetry install
  shell: |-
    poetry config virtualenvs.create true
    poetry config virtualenvs.in-project true
    poetry install --only=main
  args:
    chdir: '{{ expense_analysis_dir }}/backend'
  environment:
    PATH: /opt/pyenv/versions/{{ python_version }}/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
    CFLAGS: -O0