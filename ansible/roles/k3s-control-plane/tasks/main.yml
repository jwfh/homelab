---
- name: Check if k3s is already installed
  stat:
    path: /usr/local/bin/k3s
  register: k3s_binary

- name: Get installed k3s version
  command: /usr/local/bin/k3s --version
  register: k3s_installed_version
  changed_when: false
  failed_when: false
  when: k3s_binary.stat.exists

- name: Install required system packages
  package:
    name:
      - curl
      - iptables
      - ca-certificates
    state: present

- name: Enable IPv4 forwarding
  sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    state: present
    reload: yes

- name: Enable IPv6 forwarding
  sysctl:
    name: net.ipv6.conf.all.forwarding
    value: '1'
    state: present
    reload: yes

- name: Create k3s config directory
  file:
    path: "{{ k3s_config_dir }}"
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Generate k3s token if not defined
  set_fact:
    k3s_token: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}"
  when: k3s_token is not defined
  no_log: true

- name: Create k3s config file
  template:
    src: config.yaml.j2
    dest: "{{ k3s_config_dir }}/config.yaml"
    owner: root
    group: root
    mode: '0600'
  notify: restart k3s

- name: Download k3s installation script
  get_url:
    url: https://get.k3s.io
    dest: /tmp/k3s-install.sh
    mode: '0700'
  when: not k3s_binary.stat.exists or (k3s_installed_version.stdout is defined and k3s_version not in k3s_installed_version.stdout and k3s_version != 'stable' and k3s_version != 'latest')

- name: Install k3s server
  shell: |
    INSTALL_K3S_CHANNEL={{ k3s_channel }} \
    {% if k3s_version not in ['stable', 'latest'] %}
    INSTALL_K3S_VERSION={{ k3s_version }} \
    {% endif %}
    /tmp/k3s-install.sh server
  args:
    creates: /usr/local/bin/k3s
  environment:
    K3S_TOKEN: "{{ k3s_token }}"
  notify: restart k3s

- name: Wait for k3s to be ready
  command: /usr/local/bin/k3s kubectl get nodes
  register: k3s_nodes
  until: k3s_nodes.rc == 0
  retries: 30
  delay: 10
  changed_when: false

- name: Ensure k3s service is enabled and started
  service:
    name: k3s
    state: started
    enabled: true

- name: Create kubeconfig directory for root
  file:
    path: /root/.kube
    state: directory
    owner: root
    group: root
    mode: '0700'

- name: Symlink kubeconfig for root user
  file:
    src: "{{ k3s_kubeconfig_dest }}"
    dest: /root/.kube/config
    state: link

- name: Set kubeconfig permissions
  file:
    path: "{{ k3s_kubeconfig_dest }}"
    mode: "{{ k3s_write_kubeconfig_mode }}"

- name: Get k3s node token
  slurp:
    src: /var/lib/rancher/k3s/server/node-token
  register: k3s_node_token_file
  no_log: true

- name: Store node token as fact
  set_fact:
    k3s_node_token: "{{ k3s_node_token_file.content | b64decode | trim }}"
  no_log: true

- name: Display control plane join information
  debug:
    msg:
      - "K3s control plane is ready!"
      - "To join worker nodes, use the following:"
      - "  Server URL: https://{{ ansible_default_ipv4.address }}:6443"
      - "  Token stored in: /var/lib/rancher/k3s/server/node-token"

- name: Install kubectl for system users
  copy:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/kubectl
    remote_src: yes
    mode: '0755'
  when: k3s_install_kubectl

- name: Install helm
  block:
    - name: Download helm installation script
      get_url:
        url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        dest: /tmp/get-helm.sh
        mode: '0700'

    - name: Install helm
      command: /tmp/get-helm.sh
      args:
        creates: /usr/local/bin/helm
      environment:
        DESIRED_VERSION: "{{ k3s_helm_version }}"
  when: k3s_install_helm

- name: Include NFS mounts if defined
  include_tasks: nfs_mounts.yml
  when: k3s_nfs_mounts is defined and k3s_nfs_mounts | length > 0
